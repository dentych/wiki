[{"id":0,"href":"/k3s/setup/","title":"Setup","parent":"k3s","content":"Download here: https://k3s.io\nParameters can be written in a config file located at /etc/rancher/k3s/config.yaml.\nFirst master     Make a config file located at /etc/rancher/k3s/config.yaml, with the following content:\ncluster-init:truetoken:\u0026lt;some random string\u0026gt;Additional master nodes     Make a config file located at /etc/rancher/k3s/config.yaml with the following content:\nserver:https://94.130.182.175:6443token:\u0026lt;same random string as above\u0026gt;Worker nodes     Run script with K3S_URL and K3S_TOKEN parameters set.\ncurl -fsL https://get.k3s.io | K3S_URL=https://tychsen.me:6443 K3S_TOKEN=\u0026lt;same random string as first master\u0026gt; sh - "},{"id":1,"href":"/k3s/load-balancing/","title":"Load balancing","parent":"k3s","content":"Table of contents    Middleware  Relevant documentation   TLS  Cert-manager Ingress configuration        Load balancing is by default using Traefik.\nTraefik has two modes for Kubernetes (both of which are enabled in k3s): CRD (Custom Resource Definition) and using k8s default Ingress spec.\nMiddleware     Many things in Traefik is done using middleware, and it seems middleware can only be specified using the CRD mode.\nAnd example of a middleware defined using CRD:\n# Strip prefix /foobar and /fiibarapiVersion:traefik.containo.us/v1alpha1kind:Middlewaremetadata:name:test-stripprefixspec:stripPrefix:prefixes:- /foobar- /fiibarIn order to use this middleware using standard Ingress kind, it should be specified with an annotation in the Ingress yaml config file:\napiVersion:networking.k8s.io/v1kind:Ingressmetadata:name:foobar-ingressannotations:# This is the annotation that will enable the middleware for stripping prefixtraefik.ingress.kubernetes.io/router.middlewares:default-test-stripprefix@kubernetescrdspec:rules:- http:paths:- path:/foobarpathType:Prefixbackend:service:name:foobarport:number:80Relevant documentation     Link: https://doc.traefik.io/traefik/middlewares/overview/\nThere are examples for Kubernetes CRD under each middleware.\nTLS     TLS can be configured in the cluster using cert-manager, Let\u0026rsquo;s Encrypt and Ingress rules.\nTraefik has middleware for redirecting HTTP to HTTPS. See https://doc.traefik.io/traefik/middlewares/redirectscheme/\n# Redirect to httpsapiVersion:traefik.containo.us/v1alpha1kind:Middlewaremetadata:name:test-redirectschemespec:redirectScheme:scheme:httpspermanent:trueCert-manager     Installation instruction here: https://cert-manager.io/docs/installation/kubernetes/\nFollow the Installing with regular manifests if you don\u0026rsquo;t want to use Helm. This is the easiest solution in my opinion.\nAfter installing cert-manager, you need a ClusterIssuer. We\u0026rsquo;ll be using Let\u0026rsquo;s Encrypt.\nConfiguration guide here: https://cert-manager.io/docs/configuration/acme/\nFor k3s and traefik, the following should work for enabling LE:\napiVersion:cert-manager.io/v1kind:ClusterIssuermetadata:name:letsencrypt-prodspec:acme:# You must replace this email address with your own.# Let\u0026#39;s Encrypt will use this to contact you about expiring# certificates, and issues related to your account.email:your@email.comserver:https://acme-v02.api.letsencrypt.org/directoryprivateKeySecretRef:# Secret resource that will be used to store the account\u0026#39;s private key.name:letsencrypt-issuer# Add a single challenge solver, HTTP01 using nginxsolvers:- http01:ingress:class:traefikIngress configuration     Add following annotation to Ingress metadata: cert-manager.io/cluster-issuer: letsencrypt-prod\nIn order to force HTTPS, you need HTTPS redirect middleware:\n# Redirect to httpsapiVersion:traefik.containo.us/v1alpha1kind:Middlewaremetadata:name:redirect-httpspec:redirectScheme:scheme:httpspermanent:trueUse this by deploying this middleware to the default namespace and use the annotation traefik.ingress.kubernetes.io/router.middlewares: default-redirect-http@kubernetescrd in the Ingress metadata.\n"},{"id":2,"href":"/go/","title":"Go","parent":"Tychsen Wiki","content":"The range problem:\npackage main import \u0026#34;fmt\u0026#34; type Person struct { Name *string } func main() { people := []Person{ {Name: ptr(\u0026#34;Jan\u0026#34;)}, {Name: ptr(\u0026#34;Waddahell\u0026#34;)}, {Name: ptr(\u0026#34;Mie\u0026#34;)}, } var otherPeople []*Person for _, v := range people { otherPeople = append(otherPeople, \u0026amp;v) } for _, v := range otherPeople { fmt.Println(*v.Name) } } func ptr(str string) *string { return \u0026amp;str } "},{"id":3,"href":"/k3s/full-example/","title":"Full example","parent":"k3s","content":"Full example     apiVersion:apps/v1kind:Deploymentmetadata:name:nginxlabels:app:nginxspec:replicas:3minReadySeconds:10selector:matchLabels:app:nginxtemplate:metadata:labels:app:nginxspec:containers:- name:nginximage:nginx:1.14.2ports:- containerPort:80---apiVersion:v1kind:Servicemetadata:name:nginxspec:selector:app:nginxports:- protocol:TCPport:80---apiVersion:networking.k8s.io/v1kind:Ingressmetadata:name:nginxannotations:cert-manager.io/cluster-issuer:letsencrypt-prodkubernetes.io/ingress.allow-http:\u0026#34;false\u0026#34;traefik.ingress.kubernetes.io/router.middlewares:default-redirect-http@kubernetescrdspec:ingressClassName:traefik-lbtls:- secretName:nginx-tlshosts:- nginx.tychsen.merules:- host:nginx.tychsen.mehttp:paths:- path:/pathType:Prefixbackend:service:name:nginxport:number:80---apiVersion:traefik.containo.us/v1alpha1kind:Middlewaremetadata:name:nginx-stripprefixspec:stripPrefix:prefixes:- /nginx---# Redirect to httpsapiVersion:traefik.containo.us/v1alpha1kind:Middlewaremetadata:name:redirect-httpspec:redirectScheme:scheme:httpspermanent:true---apiVersion:networking.k8s.io/v1kind:Ingressmetadata:name:nginx2annotations:traefik.ingress.kubernetes.io/router.middlewares:default-nginx-stripprefix@kubernetescrdspec:ingressClassName:traefik-lbrules:- http:paths:- path:/nginxpathType:Prefixbackend:service:name:nginxport:number:80---apiVersion:policy/v1kind:PodDisruptionBudgetmetadata:name:nginxspec:minAvailable:1selector:matchLabels:app:nginx"},{"id":4,"href":"/categories/","title":"Categories","parent":"Tychsen Wiki","content":""},{"id":5,"href":"/database/","title":"Database setup","parent":"Tychsen Wiki","content":"Hosted at Hetzner (login)\nDocker-compose for the setup:\nversion:\u0026#34;3.6\u0026#34;services:postgres:image:postgresrestart:alwaysvolumes:- \u0026#34;./postgres/postgres_data:/var/lib/postgresql/data\u0026#34;ports:- 5432:5432environment:POSTGRES_PASSWORD:\u0026lt;redacted\u0026gt;"},{"id":6,"href":"/k3s/","title":"k3s","parent":"Tychsen Wiki","content":"https://k3s.io\n"},{"id":7,"href":"/tags/","title":"Tags","parent":"Tychsen Wiki","content":""},{"id":8,"href":"/","title":"Tychsen Wiki","parent":"","content":"Personal wiki with tech info.\n"}]